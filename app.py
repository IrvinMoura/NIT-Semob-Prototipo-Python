# app.py
# -*- coding: utf-8 -*-

import pandas as pd
import plotly.express as px
import streamlit as st

# üîπ 1. T√≠tulo do app
st.title("An√°lise de Ve√≠culos")

# üîπ 2. Upload do arquivo Excel pelo usu√°rio
arquivo = st.file_uploader("Escolha o arquivo Excel", type=["xlsx"])
if arquivo is not None:
    # üîπ 3. Ler Excel e selecionar colunas desejadas
    df = pd.read_excel(arquivo, usecols=[0, 1, 3, 6, 9, 12])
    df.columns = ["Empresa", "Linha", "Sentido", "Atividade", "Ve√≠culo", "In√≠cio"]

    # üîπ 3.1 Padronizar colunas de texto
    df["Sentido"] = df["Sentido"].str.strip().str.lower()
    df["Atividade"] = df["Atividade"].str.strip().str.lower()
    df["Empresa"] = df["Empresa"].str.strip()
    df["Linha"] = df["Linha"].astype(str).str.strip()

    # üîπ Contagem total de ve√≠culos (sem duplicados)
    veiculos_totais = df["Ve√≠culo"].drop_duplicates()
    st.write(f"Total de ve√≠culos diferentes na planilha: {len(veiculos_totais)}")

    # üîπ Contagem de ve√≠culos diferentes por empresa
    contagem_empresa_total = df.groupby("Empresa")["Ve√≠culo"].nunique().reset_index()
    contagem_empresa_total.rename(columns={"Ve√≠culo": "Qtd_Veiculos"}, inplace=True)
    st.subheader("Ve√≠culos diferentes por empresa")
    st.dataframe(contagem_empresa_total)


    # üîπ 4. Converter coluna "In√≠cio" para datetime
    df["In√≠cio"] = pd.to_datetime(df["In√≠cio"], errors="coerce")

    # üîπ 5. Filtrar dados apenas "ociosos" entre 4h e 8h
    df_filtrado = df[
        (df["Sentido"].str.upper() == "OCIOSO") &  # padroniza texto
        (df["In√≠cio"].notna()) &  # ignora NaT
        ((df["In√≠cio"].dt.hour > 3) | ((df["In√≠cio"].dt.hour == 3) & (df["In√≠cio"].dt.minute >= 40))) &
        ((df["In√≠cio"].dt.hour < 8) | ((df["In√≠cio"].dt.hour == 8) & (df["In√≠cio"].dt.minute == 0)))
    ]

    # üîπ 5.1 Remover duplicados, mantendo a primeira ocorr√™ncia de cada ve√≠culo
    df_filtrado = df_filtrado.sort_values("In√≠cio").drop_duplicates(subset=["Ve√≠culo"], keep="first")

    # üîπ 6. Totais
    veiculos_empresa = df_filtrado.groupby("Empresa")["Ve√≠culo"].unique()
    veiculos_linha = df_filtrado.groupby("Linha")["Ve√≠culo"].unique()
    todos_veiculos = df_filtrado["Ve√≠culo"].unique()

    st.write(f"Total ve√≠culos por empresa: {sum(len(v) for v in veiculos_empresa)}")
    st.write(f"Total ve√≠culos por linha: {sum(len(v) for v in veiculos_linha)}")
    st.write(f"Total ve√≠culos √∫nicos filtrados: {len(todos_veiculos)}")

    # üîπ Ve√≠culos com mais de uma linha
    veiculos_duplicados = df_filtrado.groupby("Ve√≠culo")["Linha"].nunique()
    veiculos_duplicados = veiculos_duplicados[veiculos_duplicados > 1].index
    duplicados_detalhes = df_filtrado[df_filtrado["Ve√≠culo"].isin(veiculos_duplicados)]
    duplicados_detalhes = duplicados_detalhes[["Ve√≠culo", "Linha", "In√≠cio"]].sort_values(["Ve√≠culo", "In√≠cio"])

    st.subheader("Ve√≠culos com mais de uma linha registrada")
    st.dataframe(duplicados_detalhes)

    # üîπ 7. Contagem por empresa
    contagem_empresa = df_filtrado.groupby("Empresa")["Ve√≠culo"].nunique().reset_index()
    contagem_empresa.rename(columns={"Ve√≠culo": "Qtd_Veiculos"}, inplace=True)

    # üîπ 8. Contagem por linha
    contagem_linha = df_filtrado.groupby("Linha")["Ve√≠culo"].nunique().reset_index()
    contagem_linha.rename(columns={"Ve√≠culo": "Qtd_Veiculos"}, inplace=True)

    # üîπ 9. Quantidade total de ve√≠culos
    total_veiculos = df_filtrado["Ve√≠culo"].nunique()
    st.write(f"üöç Quantidade total de ve√≠culos que realizaram a soltura: {total_veiculos}")

    # üîπ 10. Gr√°fico de pizza (Empresa)
    st.subheader("Distribui√ß√£o de Ve√≠culos por Empresa")
    fig1 = px.pie(
        contagem_empresa,
        names="Empresa",
        values="Qtd_Veiculos",
        hole=0.3
    )
    fig1.update_traces(textinfo="percent+value")
    st.plotly_chart(fig1)

    # üîπ 11. Gr√°fico de barras (Linha)
    contagem_linha_filtrada = contagem_linha[contagem_linha["Qtd_Veiculos"] > 0]
    contagem_linha_filtrada = contagem_linha_filtrada.sort_values("Linha")

    st.subheader("Quantidade de Ve√≠culos por Linha")
    fig2 = px.bar(
        contagem_linha_filtrada,
        x="Linha",
        y="Qtd_Veiculos",
        labels={"Linha": "Linha", "Qtd_Veiculos": "Qtd de Ve√≠culos"},
        height=600
    )
    fig2.update_traces(text=contagem_linha_filtrada["Qtd_Veiculos"], textposition="inside")
    fig2.update_layout(bargap=0.2)
    st.plotly_chart(fig2)
